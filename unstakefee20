// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@thirdweb-dev/contracts/base/Staking20Base.sol";
import "@thirdweb-dev/contracts/token/TokenERC20.sol";

contract DojoStake is Staking20Base {
    uint256 private constant UNSTAKE_FEE_PERCENTAGE = 30;
    address private unstakeFeeRecipient;

    constructor(
        uint256 _timeUnit,
        uint256 _rewardRatioNumerator,
        uint256 _rewardRatioDenominator,
        address _stakingToken,
        address _rewardToken,
        address _nativeTokenWrapper,
        address _unstakeFeeRecipient
    ) Staking20Base(
        _timeUnit,
        _rewardRatioNumerator,
        _rewardRatioDenominator,
        _stakingToken,
        _rewardToken,
        _nativeTokenWrapper
    ) {
        unstakeFeeRecipient = _unstakeFeeRecipient;
    }

    function unstake(uint256 _amount, bytes memory _data) external payable override {
        require(_amount > 0, "Invalid unstake amount");

        uint256 stakedAmount = stakedBalances[_msgSender()];
        require(stakedAmount >= _amount, "Insufficient staked amount");

        uint256 withdrawalFee = (_amount * UNSTAKE_FEE_PERCENTAGE) / 100;
        uint256 unstakeAmountAfterFee = _amount - withdrawalFee;

        stakedBalances[_msgSender()] -= _amount;
        stakingTokenBalance -= unstakeAmountAfterFee;

        TokenERC20(stakingToken).transfer(_msgSender(), unstakeAmountAfterFee);

        if (withdrawalFee > 0) {
            TokenERC20(stakingToken).transfer(unstakeFeeRecipient, withdrawalFee);
        }

        emit Unstaked(_msgSender(), unstakeAmountAfterFee, _data);
    }

    function _mintRewards(address _staker, uint256 _rewards) internal override {
        TokenERC20(rewardToken).mintTo(_staker, _rewards);
    }
}
